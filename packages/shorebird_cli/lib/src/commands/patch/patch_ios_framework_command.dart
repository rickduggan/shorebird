import 'dart:io' hide Platform;

import 'package:collection/collection.dart';
import 'package:crypto/crypto.dart';
import 'package:http/http.dart' as http;
import 'package:mason_logger/mason_logger.dart';
import 'package:path/path.dart' as p;
import 'package:platform/platform.dart';
import 'package:scoped/scoped.dart';
import 'package:shorebird_cli/src/archive_analysis/archive_analysis.dart';
import 'package:shorebird_cli/src/artifact_manager.dart';
import 'package:shorebird_cli/src/code_push_client_wrapper.dart';
import 'package:shorebird_cli/src/command.dart';
import 'package:shorebird_cli/src/config/shorebird_yaml.dart';
import 'package:shorebird_cli/src/doctor.dart';
import 'package:shorebird_cli/src/formatters/file_size_formatter.dart';
import 'package:shorebird_cli/src/http_client/http_client.dart';
import 'package:shorebird_cli/src/ios.dart';
import 'package:shorebird_cli/src/logger.dart';
import 'package:shorebird_cli/src/patch_diff_checker.dart';
import 'package:shorebird_cli/src/shorebird_artifact_mixin.dart';
import 'package:shorebird_cli/src/shorebird_build_mixin.dart';
import 'package:shorebird_cli/src/shorebird_env.dart';
import 'package:shorebird_cli/src/shorebird_flutter.dart';
import 'package:shorebird_cli/src/shorebird_validator.dart';
import 'package:shorebird_code_push_client/shorebird_code_push_client.dart';

/// Releases created before we introduced diffing for iOS will need patches
/// that are not diffs. This set contains the Flutter revisions of those
/// releases.
///
/// Generated by running `select distinct flutter_revision from app_release_;`
/// on September 22, 2023.
const _nonIosDiffFlutterRevisions = {
  '0b0086ffa92c25c22f50cbadc3851054f08a9cd8',
  'b7ad8d5759c4889ea323948fe589c69a39c26135',
  '49b602f7fae8f5bcd8de9547f31928058cbd768e',
  '6116674ab0d6449104f9f342d96cef0abe30a9a1',
  'ba444de6ceb9313320a70563d7b6203344e0cd87',
  '0671f4f9fb2589055d64537e03d7733448b3488b',
  '1cf1fef6a503672b919a4390ed61320daac07139',
  '5de12cedfe6002b79183bc59af04561a98c8aa82',
  '9486b6431e6c808c4e131f134b5d88017b3c32ab',
  '2e05c41803943a1e81360ae97c75a229c1fb55ef',
  '0e2d280277cf9f60f7ba802a59f9fd187ffdd050',
  '628a3eba4e0aba5e6f92c87b320f3c99afb85e61',
  '3612c8dc659dd7866578b19396efcb63cad71bef',
  'd84d466eacbeb47d6e81e960c22c6fdfe5a3917d',
  '8576da53c568d904f464b8aeac105c8790285d32',
  'd93eb3686c60b626691c8020d7353ea22a0f5ea2',
  '03e895ee09dfbb9c18681d103f4b27671ff65429',
  '8861a600668dbc4d9ca131f5158871bc0523f428',
  '47db6d73cfe3227129a510445dd82c45c2dbe347',
  '7b63f1bac9879c2b00f02bc8d404ffc4c7f24ca2',
  '012153de178d4a51cd6f9adc792ad63ae3cfb1b3',
  '83305b5088e6fe327fb3334a73ff190828d85713',
  '225beb5302e2f03603a775d23be11d96ae253ab1',
  '402424409c29c28ed69e14cbb39f0a7424a47e16',
  'c0e52af9097e779671591ea105031920f24da4d5',
  '211d78f6d673fdc6f728217c8f999827c040cd23',
  'efce3391b9c729e2899e4e1383df718c4445c3ae',
  '0fc414cbc33ee017ad509671009e8b242539ea16',
  '6b9b5ff45af7a1ef864038dd7d0c32b620b357c6',
  '7cd77f78a51576652edc337817152abf4217a257',
  '5567fb431a2ddbb70c05ff7cd8fcd58bb91f2dbc',
  '914d5b5fcacc794fd0319f2928ceb514e1e0da33',
};

class PatchIosFrameworkCommand extends ShorebirdCommand
    with ShorebirdBuildMixin, ShorebirdArtifactMixin {
  PatchIosFrameworkCommand({
    HashFunction? hashFn,
    http.Client? httpClient,
    IosArchiveDiffer? archiveDiffer,
  })  : _hashFn = hashFn ?? ((m) => sha256.convert(m).toString()),
        _httpClient = httpClient ??
            retryingHttpClient(LoggingClient(httpClient: http.Client())),
        _archiveDiffer = archiveDiffer ?? IosArchiveDiffer() {
    argParser
      ..addOption(
        'release-version',
        help: '''
The version of the associated release (e.g. "1.0.0"). This should be the version
of the iOS app that is using this module.''',
      )
      ..addFlag(
        'force',
        abbr: 'f',
        help: 'Patch without confirmation if there are no errors.',
        negatable: false,
      )
      ..addFlag(
        'dry-run',
        abbr: 'n',
        negatable: false,
        help: 'Validate but do not upload the patch.',
      );
  }

  final HashFunction _hashFn;
  final IosArchiveDiffer _archiveDiffer;
  final http.Client _httpClient;

  @override
  String get name => 'ios-framework-alpha';

  @override
  String get description =>
      'Publish new patches for a specific iOS framework release to Shorebird.';

  @override
  Future<int> run() async {
    try {
      await shorebirdValidator.validatePreconditions(
        checkUserIsAuthenticated: true,
        checkShorebirdInitialized: true,
        validators: doctor.iosCommandValidators,
        supportedOperatingSystems: {Platform.macOS},
      );
    } on PreconditionFailedException catch (e) {
      return e.exitCode.code;
    }

    final force = results['force'] == true;
    final dryRun = results['dry-run'] == true;

    if (force && dryRun) {
      logger.err('Cannot use both --force and --dry-run.');
      return ExitCode.usage.code;
    }

    showiOSStatusWarning();

    const arch = 'aarch64';
    const channelName = 'stable';
    const releasePlatform = ReleasePlatform.ios;
    final shorebirdYaml = shorebirdEnv.getShorebirdYaml()!;
    final appId = shorebirdYaml.getAppId();
    final app = await codePushClientWrapper.getApp(appId: appId);
    final releases = await codePushClientWrapper.getReleases(appId: appId);

    if (releases.isEmpty) {
      logger.info('No releases found');
      return ExitCode.success.code;
    }

    final releaseVersion = results['release-version'] as String? ??
        await _promptForReleaseVersion(releases);

    final release = releases.firstWhereOrNull(
      (r) => r.version == releaseVersion,
    );

    if (releaseVersion == null || release == null) {
      logger.info('''
No release found for version $releaseVersion

Available release versions:
${releases.map((r) => r.version).join('\n')}''');
      return ExitCode.success.code;
    }

    if (release.platformStatuses[ReleasePlatform.ios] == ReleaseStatus.draft) {
      logger.err('''
Release $releaseVersion is in an incomplete state. It's possible that the original release was terminated or failed to complete.
Please re-run the release command for this version or create a new release.''');
      return ExitCode.software.code;
    }

    final shorebirdFlutterRevision = shorebirdEnv.flutterRevision;
    if (release.flutterRevision != shorebirdFlutterRevision) {
      final installFlutterRevisionProgress = logger.progress(
        'Switching to Flutter revision ${release.flutterRevision}',
      );
      try {
        await shorebirdFlutter.installRevision(
          revision: release.flutterRevision,
        );
        installFlutterRevisionProgress.complete();
      } catch (error) {
        installFlutterRevisionProgress.fail('$error');
        return ExitCode.software.code;
      }
    }

    final buildProgress = logger.progress('Building patch');
    try {
      await runScoped(
        buildIosFramework,
        values: {
          shorebirdEnvRef.overrideWith(
            () => ShorebirdEnv(
              flutterRevisionOverride: release.flutterRevision,
            ),
          ),
        },
      );
      buildProgress.complete();
    } on ProcessException catch (error) {
      buildProgress.fail('Failed to build: ${error.message}');
      return ExitCode.software.code;
    }

    final File aotFile;
    try {
      final newestDillFile = newestAppDill();
      aotFile = await buildElfAotSnapshot(
        appDillPath: newestDillFile.path,
        outFilePath: p.join(Directory.current.path, 'build', 'out.aot'),
      );
    } catch (error) {
      buildProgress.fail('$error');
      return ExitCode.software.code;
    }

    buildProgress.complete();

    final releaseArtifactDownloadProgress =
        logger.progress('Downloading release artifact');
    final String releaseArtifactPath;
    try {
      final releaseArtifact = await codePushClientWrapper.getReleaseArtifact(
        appId: appId,
        releaseId: release.id,
        arch: 'xcframework',
        platform: ReleasePlatform.ios,
      );
      releaseArtifactPath = await artifactManager.downloadFile(
        Uri.parse(releaseArtifact.url),
        httpClient: _httpClient,
      );
    } catch (error) {
      releaseArtifactDownloadProgress.fail('$error');
      return ExitCode.software.code;
    }
    releaseArtifactDownloadProgress.complete();

    try {
      await patchDiffChecker.zipAndConfirmUnpatchableDiffsIfNecessary(
        localArtifactDirectory: Directory(getAppXcframeworkPath()),
        releaseArtifact: File(releaseArtifactPath),
        archiveDiffer: _archiveDiffer,
        force: force,
      );
    } on UserCancelledException {
      return ExitCode.success.code;
    } on UnpatchableChangeException {
      logger.info('Exiting.');
      return ExitCode.software.code;
    }

    if (dryRun) {
      logger
        ..info('No issues detected.')
        ..info('The server may enforce additional checks.');
      return ExitCode.success.code;
    }

    final File patchFile;
    if (_nonIosDiffFlutterRevisions.contains(release.flutterRevision)) {
      patchFile = aotFile;
    } else {
      final diffProgress = logger.progress('Generating diff');
      try {
        final patchFilePath = await artifactManager.createDiff(
          releaseArtifactPath: releaseArtifactPath,
          patchArtifactPath: aotFile.path,
        );
        patchFile = File(patchFilePath);
        diffProgress.complete();
      } catch (error) {
        diffProgress.fail('$error');
        return ExitCode.software.code;
      }
    }

    final patchFileSize = patchFile.statSync().size;
    final summary = [
      '''üì± App: ${lightCyan.wrap(app.displayName)} ${lightCyan.wrap('($appId)')}''',
      'üì¶ Release Version: ${lightCyan.wrap(releaseVersion)}',
      'üì∫ Channel: ${lightCyan.wrap(channelName)}',
      '''üïπÔ∏è  Platform: ${lightCyan.wrap(releasePlatform.name)} ${lightCyan.wrap('[$arch (${formatBytes(patchFileSize)})]')}''',
    ];

    logger.info(
      '''

${styleBold.wrap(lightGreen.wrap('üöÄ Ready to publish a new patch!'))}

${summary.join('\n')}
''',
    );

    final needsConfirmation = !force && !shorebirdEnv.isRunningOnCI;
    if (needsConfirmation) {
      final confirm = logger.confirm('Would you like to continue?');

      if (!confirm) {
        logger.info('Aborting.');
        return ExitCode.success.code;
      }
    }

    await codePushClientWrapper.publishPatch(
      appId: appId,
      releaseId: release.id,
      platform: releasePlatform,
      channelName: channelName,
      patchArtifactBundles: {
        Arch.arm64: PatchArtifactBundle(
          arch: arch,
          path: aotFile.path,
          hash: _hashFn(aotFile.readAsBytesSync()),
          size: patchFileSize,
        ),
      },
    );

    return ExitCode.success.code;
  }

  Future<String?> _promptForReleaseVersion(List<Release> releases) async {
    if (releases.isEmpty) return null;
    final release = logger.chooseOne(
      'Which release would you like to patch?',
      choices: releases,
      display: (release) => release.version,
    );
    return release.version;
  }
}
