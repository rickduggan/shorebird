import 'dart:async';
import 'dart:io' hide Platform;

import 'package:collection/collection.dart';
import 'package:crypto/crypto.dart';
import 'package:http/http.dart' as http;
import 'package:mason_logger/mason_logger.dart';
import 'package:path/path.dart' as p;
import 'package:platform/platform.dart';
import 'package:shorebird_cli/src/archive_analysis/archive_analysis.dart';
import 'package:shorebird_cli/src/artifact_manager.dart';
import 'package:shorebird_cli/src/code_push_client_wrapper.dart';
import 'package:shorebird_cli/src/command.dart';
import 'package:shorebird_cli/src/config/config.dart';
import 'package:shorebird_cli/src/doctor.dart';
import 'package:shorebird_cli/src/formatters/file_size_formatter.dart';
import 'package:shorebird_cli/src/http_client/http_client.dart';
import 'package:shorebird_cli/src/ios.dart';
import 'package:shorebird_cli/src/logger.dart';
import 'package:shorebird_cli/src/patch_diff_checker.dart';
import 'package:shorebird_cli/src/shorebird_artifact_mixin.dart';
import 'package:shorebird_cli/src/shorebird_build_mixin.dart';
import 'package:shorebird_cli/src/shorebird_env.dart';
import 'package:shorebird_cli/src/shorebird_flutter.dart';
import 'package:shorebird_cli/src/shorebird_validator.dart';
import 'package:shorebird_code_push_client/shorebird_code_push_client.dart';

/// Releases created before we introduced diffing for iOS will need patches
/// that are not diffs. This set contains the Flutter revisions of those
/// releases.
///
/// Generated by running `select distinct flutter_revision from app_release_;`
/// on September 22, 2023.
const _nonIosDiffFlutterRevisions = {
  '0b0086ffa92c25c22f50cbadc3851054f08a9cd8',
  'b7ad8d5759c4889ea323948fe589c69a39c26135',
  '49b602f7fae8f5bcd8de9547f31928058cbd768e',
  '6116674ab0d6449104f9f342d96cef0abe30a9a1',
  'ba444de6ceb9313320a70563d7b6203344e0cd87',
  '0671f4f9fb2589055d64537e03d7733448b3488b',
  '1cf1fef6a503672b919a4390ed61320daac07139',
  '5de12cedfe6002b79183bc59af04561a98c8aa82',
  '9486b6431e6c808c4e131f134b5d88017b3c32ab',
  '2e05c41803943a1e81360ae97c75a229c1fb55ef',
  '0e2d280277cf9f60f7ba802a59f9fd187ffdd050',
  '628a3eba4e0aba5e6f92c87b320f3c99afb85e61',
  '3612c8dc659dd7866578b19396efcb63cad71bef',
  'd84d466eacbeb47d6e81e960c22c6fdfe5a3917d',
  '8576da53c568d904f464b8aeac105c8790285d32',
  'd93eb3686c60b626691c8020d7353ea22a0f5ea2',
  '03e895ee09dfbb9c18681d103f4b27671ff65429',
  '8861a600668dbc4d9ca131f5158871bc0523f428',
  '47db6d73cfe3227129a510445dd82c45c2dbe347',
  '7b63f1bac9879c2b00f02bc8d404ffc4c7f24ca2',
  '012153de178d4a51cd6f9adc792ad63ae3cfb1b3',
  '83305b5088e6fe327fb3334a73ff190828d85713',
  '225beb5302e2f03603a775d23be11d96ae253ab1',
  '402424409c29c28ed69e14cbb39f0a7424a47e16',
  'c0e52af9097e779671591ea105031920f24da4d5',
  '211d78f6d673fdc6f728217c8f999827c040cd23',
  'efce3391b9c729e2899e4e1383df718c4445c3ae',
  '0fc414cbc33ee017ad509671009e8b242539ea16',
  '6b9b5ff45af7a1ef864038dd7d0c32b620b357c6',
  '7cd77f78a51576652edc337817152abf4217a257',
  '5567fb431a2ddbb70c05ff7cd8fcd58bb91f2dbc',
  '914d5b5fcacc794fd0319f2928ceb514e1e0da33',
};

/// {@template patch_ios_command}
/// `shorebird patch ios-alpha` command.
/// {@endtemplate}
class PatchIosCommand extends ShorebirdCommand
    with ShorebirdBuildMixin, ShorebirdArtifactMixin {
  /// {@macro patch_ios_command}
  PatchIosCommand({
    HashFunction? hashFn,
    http.Client? httpClient,
    IosArchiveDiffer? archiveDiffer,
  })  : _hashFn = hashFn ?? ((m) => sha256.convert(m).toString()),
        _archiveDiffer = archiveDiffer ?? IosArchiveDiffer(),
        _httpClient = httpClient ??
            retryingHttpClient(LoggingClient(httpClient: http.Client())) {
    argParser
      ..addOption(
        'target',
        abbr: 't',
        help: 'The main entrypoint file of the application.',
      )
      ..addOption(
        'flavor',
        help: 'The product flavor to use when building the app.',
      )
      ..addFlag(
        'codesign',
        help: 'Codesign the application bundle.',
        defaultsTo: true,
      )
      ..addFlag(
        'force',
        abbr: 'f',
        help: 'Patch without confirmation if there are no errors.',
        negatable: false,
      )
      ..addFlag(
        'dry-run',
        abbr: 'n',
        negatable: false,
        help: 'Validate but do not upload the patch.',
      );
  }

  @override
  String get name => 'ios-alpha';

  @override
  String get description =>
      'Publish new patches for a specific iOS release to Shorebird.';

  final HashFunction _hashFn;
  final IosArchiveDiffer _archiveDiffer;
  final http.Client _httpClient;

  @override
  Future<int> run() async {
    try {
      await shorebirdValidator.validatePreconditions(
        checkShorebirdInitialized: true,
        checkUserIsAuthenticated: true,
        validators: doctor.iosCommandValidators,
        supportedOperatingSystems: {Platform.macOS},
      );
    } on PreconditionFailedException catch (error) {
      return error.exitCode.code;
    }

    showiOSStatusWarning();

    final force = results['force'] == true;
    final dryRun = results['dry-run'] == true;

    if (force && dryRun) {
      logger.err('Cannot use both --force and --dry-run.');
      return ExitCode.usage.code;
    }

    const arch = 'aarch64';
    const channelName = 'stable';
    const releasePlatform = ReleasePlatform.ios;
    final flavor = results['flavor'] as String?;

    final shorebirdYaml = shorebirdEnv.getShorebirdYaml()!;
    final appId = shorebirdYaml.getAppId(flavor: flavor);
    final app = await codePushClientWrapper.getApp(appId: appId);

    try {
      await _buildPatch();
    } catch (_) {
      return ExitCode.software.code;
    }

    final archivePath = getXcarchiveDirectory()?.path;
    if (archivePath == null) {
      logger.err('Unable to find .xcarchive directory');
      return ExitCode.software.code;
    }

    final plistFile = File(p.join(archivePath, 'Info.plist'));
    if (!plistFile.existsSync()) {
      logger.err('No Info.plist file found at ${plistFile.path}.');
      return ExitCode.software.code;
    }

    final plist = Plist(file: plistFile);
    final String releaseVersion;
    try {
      releaseVersion = plist.versionNumber;
    } catch (error) {
      logger.err('Failed to determine release version: $error');
      return ExitCode.software.code;
    }

    logger.info('Detected release version $releaseVersion');

    final release = await codePushClientWrapper.getRelease(
      appId: appId,
      releaseVersion: releaseVersion,
    );

    if (release.platformStatuses[ReleasePlatform.ios] == null) {
      logger.err('No iOS release found for $releaseVersion.');
      return ExitCode.software.code;
    } else if (release.platformStatuses[ReleasePlatform.ios] ==
        ReleaseStatus.draft) {
      logger.err('''
Release $releaseVersion is in an incomplete state. It's possible that the original release was terminated or failed to complete.
Please re-run the release command for this version or create a new release.''');
      return ExitCode.software.code;
    }

    final originalFlutterRevision = shorebirdEnv.flutterRevision;
    if (release.flutterRevision != originalFlutterRevision) {
      logger.info('''

The release you are trying to patch was built with a different version of Flutter.

Release Flutter Revision: ${release.flutterRevision}
Current Flutter Revision: $originalFlutterRevision
''');

      var flutterVersionProgress = logger.progress(
        'Switching to Flutter revision ${release.flutterRevision}',
      );
      await shorebirdFlutter.useRevision(revision: release.flutterRevision);
      flutterVersionProgress.complete();

      try {
        await _buildPatch();
      } catch (_) {
        return ExitCode.software.code;
      } finally {
        flutterVersionProgress = logger.progress(
          '''Switching back to original Flutter revision $originalFlutterRevision''',
        );
        await shorebirdFlutter.useRevision(revision: originalFlutterRevision);
        flutterVersionProgress.complete();
      }
    }

    final releaseArtifactDownloadProgress =
        logger.progress('Downloading release artifact');

    final String releaseArtifactPath;
    try {
      final releaseArtifact = await codePushClientWrapper.getReleaseArtifact(
        appId: appId,
        releaseId: release.id,
        arch: 'xcarchive',
        platform: ReleasePlatform.ios,
      );

      releaseArtifactPath = await artifactManager.downloadFile(
        Uri.parse(releaseArtifact.url),
        httpClient: _httpClient,
      );
    } catch (error) {
      releaseArtifactDownloadProgress.fail('$error');
      return ExitCode.software.code;
    }

    releaseArtifactDownloadProgress.complete();

    try {
      await patchDiffChecker.zipAndConfirmUnpatchableDiffsIfNecessary(
        localArtifactDirectory: Directory(archivePath),
        releaseArtifact: File(releaseArtifactPath),
        archiveDiffer: _archiveDiffer,
        force: force,
      );
    } on UserCancelledException {
      return ExitCode.success.code;
    } on UnpatchableChangeException {
      logger.info('Exiting.');
      return ExitCode.software.code;
    }

    if (dryRun) {
      logger
        ..info('No issues detected.')
        ..info('The server may enforce additional checks.');
      return ExitCode.success.code;
    }

    final File patchFile;
    if (_nonIosDiffFlutterRevisions.contains(release.flutterRevision)) {
      logger.detail(
        '''
Release was created with ${release.flutterRevision}, which does not support 
diffing for iOS. Uploading full artifact as patch.''',
      );
      // Upload the full artifact as the patch.
      // This will eventually be deleted as these releases stop being patched.
      patchFile = File(_aotOutputPath);
    } else {
      // Upload a diff of the release artifact and the current artifact as the
      // patch.
      final createDiffProgress = logger.progress('Creating artifacts');

      final tempDir = Directory.systemTemp.createTempSync();
      await artifactManager.extractZip(
        zipFile: File(releaseArtifactPath),
        outputDirectory: tempDir,
      );

      final baseReleaseDiffArtifact = tempDir
          .listSync(recursive: true)
          .whereType<File>()
          .firstWhereOrNull((file) => file.path.endsWith('App.framework/App'));

      if (baseReleaseDiffArtifact == null) {
        logger.err('Could not find App.framework/App in release artifact.');
        return ExitCode.software.code;
      }

      try {
        patchFile = File(
          await artifactManager.createDiff(
            releaseArtifactPath: baseReleaseDiffArtifact.path,
            patchArtifactPath: _aotOutputPath,
          ),
        );
      } catch (error) {
        createDiffProgress.fail('$error');
        return ExitCode.software.code;
      }
      createDiffProgress.complete();
    }

    final patchFileSize = patchFile.statSync().size;

    final summary = [
      '''📱 App: ${lightCyan.wrap(app.displayName)} ${lightCyan.wrap('($appId)')}''',
      if (flavor != null) '🍧 Flavor: ${lightCyan.wrap(flavor)}',
      '📦 Release Version: ${lightCyan.wrap(releaseVersion)}',
      '📺 Channel: ${lightCyan.wrap(channelName)}',
      '''🕹️  Platform: ${lightCyan.wrap(releasePlatform.name)} ${lightCyan.wrap('[$arch (${formatBytes(patchFileSize)})]')}''',
    ];

    logger.info(
      '''

${styleBold.wrap(lightGreen.wrap('🚀 Ready to publish a new patch!'))}

${summary.join('\n')}
''',
    );

    final needsConfirmation = !force && !shorebirdEnv.isRunningOnCI;
    if (needsConfirmation) {
      final confirm = logger.confirm('Would you like to continue?');

      if (!confirm) {
        logger.info('Aborting.');
        return ExitCode.success.code;
      }
    }

    await codePushClientWrapper.publishPatch(
      appId: appId,
      releaseId: release.id,
      platform: releasePlatform,
      channelName: channelName,
      patchArtifactBundles: {
        Arch.arm64: PatchArtifactBundle(
          arch: arch,
          path: patchFile.path,
          hash: _hashFn(File(_aotOutputPath).readAsBytesSync()),
          size: patchFileSize,
        ),
      },
    );

    return ExitCode.success.code;
  }

  String get _aotOutputPath =>
      p.join(Directory.current.path, 'build', 'out.aot');

  Future<void> _buildPatch() async {
    final target = results['target'] as String?;
    final flavor = results['flavor'] as String?;
    final shouldCodesign = results['codesign'] == true;
    final buildProgress = logger.progress('Building patch');
    try {
      // If buildIpa is called with a different codesign value than the release
      // was, we will erroneously report native diffs.
      await buildIpa(codesign: shouldCodesign, flavor: flavor, target: target);
    } on ProcessException catch (error) {
      buildProgress.fail('Failed to build: ${error.message}');
      rethrow;
    } on BuildException catch (error) {
      buildProgress.fail('Failed to build IPA');
      logger.err(error.message);
      rethrow;
    }

    try {
      final newestDillFile = newestAppDill();
      await buildElfAotSnapshot(
        appDillPath: newestDillFile.path,
        outFilePath: _aotOutputPath,
      );
    } catch (error) {
      buildProgress.fail('$error');
      rethrow;
    }

    buildProgress.complete();
  }
}
